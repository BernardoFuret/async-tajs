fg2: <main> function()
  block 0: [entry]
    node 0: constant[undefined,v1] (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 1]
  block 1:
    node 1: constant["tajs-host-env:string-replace-model.js",v2] (host-environment-sources-loader)
    node 2: constant[true,v3] (host-environment-sources-loader)
    ->[block 2] ~>[block 22]
  block 2:
    node 3: call[TAJS_load,v2,v3,v4] (host-environment-sources-loader)
    ->[block 3] ~>[block 22]
  block 3:
    node 4: call[-,v4,-] (host-environment-sources-loader)
    ->[block 4] ~>[block 22]
  block 4:
    node 5: function-expr[function(),v5] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:1:5)
    node 6: write-variable[v5,'g']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:1:1)
    node 7: read-variable['g',v7,-] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:9:1)
    node 8: new[v6] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:9:15)
    node 9: constant[0.0,v8] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:10:12)
    node 10: write-property[v6,'xxx14',v8] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:10:5)
    node 11: constant[0.0,v9] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:11:11)
    node 12: write-property[v6,'xxx9',v9] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:11:5)
    node 13: constant[0.0,v10] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:12:11)
    node 14: write-property[v6,'xxx5',v10] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:12:5)
    node 15: constant[0.0,v11] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:13:11)
    node 16: write-property[v6,'xxx6',v11] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:13:5)
    node 17: constant[0.0,v12] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:14:11)
    node 18: write-property[v6,'xxx7',v12] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:14:5)
    node 19: constant[0.0,v13] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:15:11)
    node 20: write-property[v6,'xxx8',v13] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:15:5)
    node 21: constant[0.0,v14] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:16:11)
    node 22: write-property[v6,'xxx0',v14] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:16:5)
    node 23: constant[0.0,v15] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:17:11)
    node 24: write-property[v6,'xxx1',v15] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:17:5)
    node 25: constant[0.0,v16] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:18:11)
    node 26: write-property[v6,'xxx2',v16] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:18:5)
    node 27: constant[0.0,v17] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:19:11)
    node 28: write-property[v6,'xxx3',v17] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:19:5)
    node 29: function-expr[function(o),v18] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:20:8)
    node 30: write-property[v6,'f',v18] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:20:5)
    node 31: write-property[v7,'prototype',v6] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:9:1)
    node 32: <variable-non-null-undef>['g']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:9:1)
    node 33: read-variable['g',v19,-] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:30:5)
    ->[block 5] ~>[block 22]
  block 5:
    node 34: construct[-,v19,-]* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:30:1)
    ->[block 6] ~>[block 22]
  block 6:
    node 35: nop(eventDispatchers: entry) (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 7,block 11] ~>[block 22]
  block 7:
    node 36: event-dispatcher <LOAD>* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 10] ~>[block 8]
  block 8:
    node 37: catch[v21] (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    node 38: nop(eventDispatchers: exceptional exit Load) (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 9,block 11]
  block 9:
    node 39: throw[v21]* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[]
  block 10:
    node 40: nop(eventDispatchers: ordinary exit Load)* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 11] ~>[block 22]
  block 11:
    node 41: nop(eventDispatchers: post Load)* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 7,block 12,block 16] ~>[block 22]
  block 12:
    node 42: event-dispatcher <OTHER>* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 15] ~>[block 13]
  block 13:
    node 43: catch[v22] (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    node 44: nop(eventDispatchers: exceptional exit Other) (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 14,block 16]
  block 14:
    node 45: throw[v22]* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[]
  block 15:
    node 46: nop(eventDispatchers: ordinary exit Other)* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 16] ~>[block 22]
  block 16:
    node 47: nop(eventDispatchers: post Other)* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 12,block 17,block 21] ~>[block 22]
  block 17:
    node 48: event-dispatcher <UNLOAD>* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 20] ~>[block 18]
  block 18:
    node 49: catch[v23] (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    node 50: nop(eventDispatchers: exceptional exit Unload) (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 19,block 21]
  block 19:
    node 51: throw[v23]* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[]
  block 20:
    node 52: nop(eventDispatchers: ordinary exit Unload)* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 21] ~>[block 22]
  block 21:
    node 53: nop(eventDispatchers: post Unload)* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 17,block 24] ~>[block 22]
  block 22:
    node 54: catch[v20] (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[block 6,block 23]
  block 23:
    node 55: throw[v20]* (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[]
  block 24: [exit-ordinary]
    node 56: return[v1] (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[]
  block 25: [exit-exceptional]
    node 57: exceptional-return (test/flowgraphbuilder/testExpressionStatementResultRegister.js)
    ->[]
function()
  block 26: [entry]
    node 58: constant[undefined,v1] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:1:5)
    node 59: vardecl['o']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:2:9)
    node 60: vardecl['var0']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:5:9)
    ->[block 27]
  block 27:
    node 61: new[v3] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:2:13)
    node 62: write-variable[v3,'o']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:2:9)
    node 63: read-variable['o',v5,v2] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:3:5)
    node 64: new[v4] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:3:12)
    node 65: write-property[v5,'p1',v4] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:3:5)
    node 66: <variable-non-null-undef>['o']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:3:5)
    node 67: read-variable['this',v7,-] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:4:5)
    node 68: read-property[v7,'f',-] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:4:5)
    node 69: read-variable['o',v8,v2] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:4:12)
    ->[block 28]
  block 28:
    node 70: call[v7,'f',v8,-]* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:4:5)
    ->[block 29]
  block 29:
    node 71: read-variable['o',v10,v2] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:5:16)
    node 72: read-property[v10,'p2',v9] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:5:16)
    node 73: <variable-non-null-undef>['o'] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:5:16)
    node 74: write-variable[v9,'var0']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:5:9)
    node 75: read-variable['var0',v14,v2] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:6:17)
    node 76: read-variable['undefined',v15,v2] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:6:26)
    node 77: !==[v14,v15,v13] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:6:17)
    ->[block 30]
  block 30:
    node 78: call[TAJS_assert,v13,-]* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:6:5)
    ->[block 31]
  block 31: [exit-ordinary]
    node 79: return[v1] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:1:5)
    ->[]
  block 32: [exit-exceptional]
    node 80: exceptional-return (test/flowgraphbuilder/testExpressionStatementResultRegister.js:1:5)
    ->[]
function(o)
  block 33: [entry]
    node 81: constant[undefined,v1] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:20:8)
    node 82: vardecl['var1']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:21:13)
    node 83: vardecl['var2']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:22:13)
    ->[block 34]
  block 34:
    node 84: read-variable['document',v5,-] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:21:20)
    node 85: read-property[v5,'createElement',-] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:21:20)
    node 86: <variable-non-null-undef>['document'] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:21:20)
    node 87: constant["canvas",v6] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:21:43)
    ->[block 35]
  block 35:
    node 88: call[v5,'createElement',v6,v3] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:21:20)
    ->[block 36]
  block 36:
    node 89: write-variable[v3,'var1']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:21:13)
    node 90: read-variable['o',v9,v2] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:22:20)
    node 91: read-property[v9,'p1',v8] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:22:20)
    node 92: <variable-non-null-undef>['o'] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:22:20)
    node 93: read-property[v8,'xxx15',v7] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:22:20)
    node 94: <property-non-null-undef>[v9,'p1'] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:22:20)
    node 95: write-variable[v7,'var2']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:22:13)
    node 96: read-variable['var1',v11,v2] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:23:9)
    node 97: constant[0.0,v10] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:23:22)
    node 98: write-property[v11,'xxx10',v10] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:23:9)
    node 99: <variable-non-null-undef>['var1']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:23:9)
    node 100: read-variable['o',v13,v2] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:24:9)
    node 101: constant[0.0,v12] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:24:19)
    node 102: write-property[v13,'xxx12',v12] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:24:9)
    node 103: <variable-non-null-undef>['o']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:24:9)
    node 104: read-variable['var2',v14,v2] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:25:13)
    node 105: if[v14](true-block:37,false-block:37)* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:25:9)
    ->[block 37]
  block 37:
    node 106: read-variable['o',v16,v2] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:27:9)
    node 107: read-variable['var1',v18,-] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:27:16)
    node 108: read-property[v18,'getContext',-] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:27:16)
    node 109: <variable-non-null-undef>['var1'] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:27:16)
    ->[block 38]
  block 38:
    node 110: call[v18,'getContext',v15] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:27:16)
    ->[block 39]
  block 39:
    node 111: write-property[v16,'p2',v15] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:27:9)
    node 112: <variable-non-null-undef>['o']* (test/flowgraphbuilder/testExpressionStatementResultRegister.js:27:9)
    ->[block 40]
  block 40: [exit-ordinary]
    node 113: return[v1] (test/flowgraphbuilder/testExpressionStatementResultRegister.js:20:8)
    ->[]
  block 41: [exit-exceptional]
    node 114: exceptional-return (test/flowgraphbuilder/testExpressionStatementResultRegister.js:20:8)
    ->[]

test/flowgraphbuilder/testExpressionStatementResultRegister.js:5:16: [definite] Property is null/undefined
test/flowgraphbuilder/testExpressionStatementResultRegister.js:6:17: [definite] Variable var0 is null/undefined
test/flowgraphbuilder/testExpressionStatementResultRegister.js:25:9: [definite] The conditional expression is always false
test/flowgraphbuilder/testExpressionStatementResultRegister.js:25:13: [definite] Variable var2 is null/undefined
test/flowgraphbuilder/testExpressionStatementResultRegister.js:10:5: [definite] Dead assignment, property xxx14 is never read
test/flowgraphbuilder/testExpressionStatementResultRegister.js:11:5: [definite] Dead assignment, property xxx9 is never read
test/flowgraphbuilder/testExpressionStatementResultRegister.js:12:5: [definite] Dead assignment, property xxx5 is never read
test/flowgraphbuilder/testExpressionStatementResultRegister.js:13:5: [definite] Dead assignment, property xxx6 is never read
test/flowgraphbuilder/testExpressionStatementResultRegister.js:14:5: [definite] Dead assignment, property xxx7 is never read
test/flowgraphbuilder/testExpressionStatementResultRegister.js:15:5: [definite] Dead assignment, property xxx8 is never read
test/flowgraphbuilder/testExpressionStatementResultRegister.js:16:5: [definite] Dead assignment, property xxx0 is never read
test/flowgraphbuilder/testExpressionStatementResultRegister.js:17:5: [definite] Dead assignment, property xxx1 is never read
test/flowgraphbuilder/testExpressionStatementResultRegister.js:18:5: [definite] Dead assignment, property xxx2 is never read
test/flowgraphbuilder/testExpressionStatementResultRegister.js:19:5: [definite] Dead assignment, property xxx3 is never read
test/flowgraphbuilder/testExpressionStatementResultRegister.js:22:20: [definite] Reading absent property xxx15
test/flowgraphbuilder/testExpressionStatementResultRegister.js:24:9: [definite] Dead assignment, property xxx12 is never read
test/flowgraphbuilder/testExpressionStatementResultRegister.js: [definite] Exceptional program exit is unreachable
test/flowgraphbuilder/testExpressionStatementResultRegister.js:27:16: [maybe] Converting undefined to string
Soundness testing succeeded for 43 checks (with 0 expected failures)
