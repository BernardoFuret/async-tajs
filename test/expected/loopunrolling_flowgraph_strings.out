<main> function()
  block 0: [entry]
    node 0: constant[undefined,v1] (out/temp-sources/loopunrolling_flowgraph_strings:1:1)
    ->[block 1]
  block 1:
    node 1: constant["PRE",-]* (out/temp-sources/loopunrolling_flowgraph_strings:1:1)
    node 2: constant["INIT",-]* (out/temp-sources/loopunrolling_flowgraph_strings:1:12)
    ->[block 2]
  block 2:
    node 3: constant["COND",v2] (out/temp-sources/loopunrolling_flowgraph_strings:1:20)
    ->[block 3] ~>[block 9]
  block 3:
    node 4: begin-loop[v2] (out/temp-sources/loopunrolling_flowgraph_strings:1:34)
    ->[block 4] ~>[block 9]
  block 4:
    node 5: if[v2](true-block:7,false-block:5) (out/temp-sources/loopunrolling_flowgraph_strings:1:20)
    ->[block 5,block 7] ~>[block 9]
  block 5:
    node 6: end-loop[v2]* (out/temp-sources/loopunrolling_flowgraph_strings:1:8)
    ->[block 6]
  block 6:
    node 7: constant["POST",-]* (out/temp-sources/loopunrolling_flowgraph_strings:1:46)
    ->[block 10]
  block 7:
    node 8: constant["BODY",-]* (out/temp-sources/loopunrolling_flowgraph_strings:1:36)
    ->[block 8] ~>[block 9]
  block 8:
    node 9: constant["INC",-]* (out/temp-sources/loopunrolling_flowgraph_strings:1:28)
    ->[block 2] ~>[block 9]
  block 9:
    node 10: end-loop[v2]* (out/temp-sources/loopunrolling_flowgraph_strings:1:8)
    ->[block 11]
  block 10: [exit-ordinary]
    node 11: return[v1] (out/temp-sources/loopunrolling_flowgraph_strings:1:1)
    ->[]
  block 11: [exit-exceptional]
    node 12: exceptional-return (out/temp-sources/loopunrolling_flowgraph_strings:1:1)
    ->[]

<main> function()
  block 0: [entry]
    node 0: constant[undefined,v1] (out/temp-sources/loopunrolling_flowgraph_strings:1:1)
    ->[block 1]
  block 1:
    node 1: constant["PRE",-]* (out/temp-sources/loopunrolling_flowgraph_strings:1:1)
    node 2: constant["INIT",-]* (out/temp-sources/loopunrolling_flowgraph_strings:1:12)
    ->[block 2]
  block 2:
    node 3: constant["COND",v2] (out/temp-sources/loopunrolling_flowgraph_strings:1:20)
    ->[block 3] ~>[block 9]
  block 3:
    node 4: begin-loop[v2] (out/temp-sources/loopunrolling_flowgraph_strings:1:34)
    ->[block 4] ~>[block 9]
  block 4:
    node 5: if[v2](true-block:7,false-block:5) (out/temp-sources/loopunrolling_flowgraph_strings:1:20)
    ->[block 5,block 7] ~>[block 9]
  block 5:
    node 6: end-loop[v2]* (out/temp-sources/loopunrolling_flowgraph_strings:1:8)
    ->[block 6]
  block 6:
    node 7: constant["POST",-]* (out/temp-sources/loopunrolling_flowgraph_strings:1:46)
    ->[block 10]
  block 7:
    node 8: constant["BODY",-]* (out/temp-sources/loopunrolling_flowgraph_strings:1:36)
    ->[block 8] ~>[block 9]
  block 8:
    node 9: constant["INC",-]* (out/temp-sources/loopunrolling_flowgraph_strings:1:28)
    ->[block 2] ~>[block 9]
  block 9:
    node 10: end-loop[v2]* (out/temp-sources/loopunrolling_flowgraph_strings:1:8)
    ->[block 11]
  block 10: [exit-ordinary]
    node 11: return[v1] (out/temp-sources/loopunrolling_flowgraph_strings:1:1)
    ->[]
  block 11: [exit-exceptional]
    node 12: exceptional-return (out/temp-sources/loopunrolling_flowgraph_strings:1:1)
    ->[]

out/temp-sources/loopunrolling_flowgraph_strings:1:20: [definite] The conditional expression is always true
